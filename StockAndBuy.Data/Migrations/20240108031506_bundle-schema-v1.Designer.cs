// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockAndBuy.Data;

#nullable disable

namespace StockAndBuy.Data.Migrations
{
    [DbContext(typeof(StockAndBuyDbContext))]
    [Migration("20240108031506_bundle-schema-v1")]
    partial class bundleschemav1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StockAndBuy.Core.Models.Bundle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsMainBundle")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Bundles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6e"),
                            IsMainBundle = true,
                            Name = "Bicycle"
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6d"),
                            IsMainBundle = false,
                            Name = "Wheel"
                        });
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.BundleParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BundlePartId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RequiredUnits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BundlePartId");

                    b.HasIndex("BundleId", "BundlePartId")
                        .IsUnique();

                    b.ToTable("BundleParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e61"),
                            BundleId = new Guid("6128354f-2e07-4063-901a-b60c02930e6e"),
                            BundlePartId = new Guid("6128354f-2e07-4063-901a-b60c02930e6d"),
                            RequiredUnits = 1
                        });
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.BundleSpareParts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RequiredUnits")
                        .HasColumnType("int");

                    b.Property<Guid>("SparePartId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SparePartId");

                    b.HasIndex("BundleId", "SparePartId")
                        .IsUnique();

                    b.ToTable("BundleSpareParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e61"),
                            BundleId = new Guid("6128354f-2e07-4063-901a-b60c02930e6d"),
                            RequiredUnits = 1,
                            SparePartId = new Guid("6128354f-2e07-4063-901a-b60c02930e6a")
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e62"),
                            BundleId = new Guid("6128354f-2e07-4063-901a-b60c02930e6d"),
                            RequiredUnits = 1,
                            SparePartId = new Guid("6128354f-2e07-4063-901a-b60c02930e6b")
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e63"),
                            BundleId = new Guid("6128354f-2e07-4063-901a-b60c02930e6e"),
                            RequiredUnits = 1,
                            SparePartId = new Guid("6128354f-2e07-4063-901a-b60c02930e6c")
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e64"),
                            BundleId = new Guid("6128354f-2e07-4063-901a-b60c02930e6e"),
                            RequiredUnits = 2,
                            SparePartId = new Guid("6128354f-2e07-4063-901a-b60c02930e6d")
                        });
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.SparePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("InventoryCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SpareParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6a"),
                            InventoryCount = 60,
                            Name = "Frame"
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6b"),
                            InventoryCount = 35,
                            Name = "Tube"
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6c"),
                            InventoryCount = 50,
                            Name = "Seat"
                        },
                        new
                        {
                            Id = new Guid("6128354f-2e07-4063-901a-b60c02930e6d"),
                            InventoryCount = 60,
                            Name = "Pedals"
                        });
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.BundleParts", b =>
                {
                    b.HasOne("StockAndBuy.Core.Models.Bundle", "Bundle")
                        .WithMany("BundleParts")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockAndBuy.Core.Models.Bundle", "BundlePart")
                        .WithMany()
                        .HasForeignKey("BundlePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("BundlePart");
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.BundleSpareParts", b =>
                {
                    b.HasOne("StockAndBuy.Core.Models.Bundle", "Bundle")
                        .WithMany("SpareParts")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockAndBuy.Core.Models.SparePart", "SparePart")
                        .WithMany()
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bundle");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("StockAndBuy.Core.Models.Bundle", b =>
                {
                    b.Navigation("BundleParts");

                    b.Navigation("SpareParts");
                });
#pragma warning restore 612, 618
        }
    }
}
